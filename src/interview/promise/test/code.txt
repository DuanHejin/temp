setTimeout(() => {
    console.log(1);
}, 1000);
console.log(2);

************************************************************************************

setTimeout(() => {
    console.log(1);
}, 20);
console.log(2);
setTimeout(() => {
    console.log(3);
}, 10);
console.log(4);
// console.time('AA');
for (let i = 0; i < 90000000; i++) {
    // do soming
}
//=>AA: 79ms 左右
// console.timeEnd('AA'); 
console.log(5);
setTimeout(() => {
    console.log(6);
}, 8);
console.log(7);
setTimeout(() => {
    console.log(8);
}, 15);
console.log(9); 
  2 4 5 7 9 3 1 6 8 


************************************************************************************

new Promise(resolve => {
    console.log('promise1');
    resolve();
}).then(() => {
    console.log('then11');
    // return 
    new Promise(resolve => {
        console.log('promise2');
        resolve();
    }).then(() => {
        console.log('then21'); 微任务3  =》  可以立即执行
    }).then(() => {
        console.log('then22');  微任务4  =》  微任务3执行没有报错
    });
    //微任务1
}).then(() => {
    console.log('then12'); // 微任务2 =》  微任务1执行完 没有报错  
}).then(()=> console.log(5));// 微任务5

1 2(2) 5   
        
3(1) 4 



promise1
then11
promise2

then21
then12
then22
5




************************************************************************************

console.log('start');
let intervalId;
Promise.resolve().then(() => {
    console.log('p1'); // v1 yes
}).then(() => {
    console.log('p2');// v2
});
setTimeout(() => {
    Promise.resolve().then(() => {
        console.log('p3'); v3 yes
    }).then(() => {
        console.log('p4');  v4
    });
    intervalId = setInterval(() => {
        console.log('interval');
    }, 3000);  h2
    console.log('timeout1');
}, 0);  h1
start
p1
p2
timeout1
p3
p4
interval

************************************************************************************

async function async1() {
    console.log('async1 start');
    await async2();
    console.log('async1 end');  // v1 yes
}
async function async2() {
    console.log('async2');
}
console.log('script start');
setTimeout(function() {
    console.log('setTimeout');
}, 0) // h1
async1();
new Promise(function(resolve) {
    console.log('promise1');
    resolve();
}).then(function() {
    console.log('promise2'); // v2  yes
});
console.log('script end');

'script start'
'async1 start'
'async2'
promise1
script end
async1 end
promise2
setTimeout



Promise.resolve().then(function success (res) {
    throw new Error('error!!!')  
  }, function fail1 (err) {
    console.log('fail1', err)
  }).catch(function fail2 (err) {
    console.log('fail2', err)
  })


手写 promise A+ 规范

手写 generator async/await 